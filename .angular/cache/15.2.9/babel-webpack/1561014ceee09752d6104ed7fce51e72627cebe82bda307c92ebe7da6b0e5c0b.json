{"ast":null,"code":"'use strict';\n\n/* global fetch, btoa, Headers */\nvar _asyncToGenerator = require(\"C:/3GL/Angular/CloudApp/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nconst core = require('./core');\nclass StatusError extends Error {\n  constructor(res, ...params) {\n    super(...params);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError);\n    }\n    this.name = 'StatusError';\n    this.message = res.statusMessage;\n    this.statusCode = res.status;\n    this.res = res;\n    this.json = res.json.bind(res);\n    this.text = res.text.bind(res);\n    this.arrayBuffer = res.arrayBuffer.bind(res);\n    let buffer;\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer();\n      return buffer;\n    };\n    Object.defineProperty(this, 'responseBody', {\n      get\n    });\n    // match Node.js headers object\n    this.headers = {};\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value;\n    }\n  }\n}\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (_url, body, _headers = {}) {\n    _url = baseurl + (_url || '');\n    let parsed = new URL(_url);\n    if (!headers) headers = {};\n    if (parsed.username) {\n      headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password);\n      parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search);\n    }\n    if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n      throw new Error(`Unknown protocol, ${parsed.protocol}`);\n    }\n    if (body) {\n      if (body instanceof ArrayBuffer || ArrayBuffer.isView(body) || typeof body === 'string') {\n        // noop\n      } else if (typeof body === 'object') {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      } else {\n        throw new Error('Unknown body type.');\n      }\n    }\n    _headers = new Headers({\n      ...(headers || {}),\n      ..._headers\n    });\n    const resp = yield fetch(parsed, {\n      method,\n      headers: _headers,\n      body\n    });\n    resp.statusCode = resp.status;\n    if (!statusCodes.has(resp.status)) {\n      throw new StatusError(resp);\n    }\n    if (encoding === 'json') return resp.json();else if (encoding === 'buffer') return resp.arrayBuffer();else if (encoding === 'string') return resp.text();else return resp;\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = core(mkrequest);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}