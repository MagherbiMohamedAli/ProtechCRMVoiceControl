{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeakerRecognizer = void 0;\nconst Exports_js_1 = require(\"../common.speech/Exports.js\");\nconst Contracts_js_1 = require(\"./Contracts.js\");\nconst Exports_js_2 = require(\"./Exports.js\");\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nclass SpeakerRecognizer extends Exports_js_2.Recognizer {\n  /**\n   * Initializes an instance of the SpeakerRecognizer.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const configImpl = speechConfig;\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new Exports_js_1.SpeakerRecognitionConnectionFactory());\n    this.privAudioConfigImpl = audioConfig;\n    Contracts_js_1.Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n    this.privDisposedSpeakerRecognizer = false;\n    this.privProperties = configImpl.properties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeakerRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this SpeakerRecognizer.\n   * @member SpeakerRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Get recognition result for model using given audio\n   * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @async\n   * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\n   * @param cb - Callback invoked once result is returned.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n      return this.recognizeSpeakerOnceAsyncImpl(model);\n    });\n  }\n  /**\n   * Included for compatibility\n   * @member SpeakerRecognizer.prototype.close\n   * @function\n   * @public\n   * @async\n   */\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n      yield this.dispose(true);\n    });\n  }\n  recognizeSpeakerOnceAsyncImpl(model) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n      yield this.implRecognizerStop();\n      const result = yield this.privReco.recognizeSpeaker(model);\n      yield this.implRecognizerStop();\n      return result;\n    });\n  }\n  implRecognizerStop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privReco) {\n        yield this.privReco.stopRecognizing();\n      }\n      return;\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new Exports_js_1.RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new Exports_js_1.SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedSpeakerRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedSpeakerRecognizer = true;\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n}\nexports.SpeakerRecognizer = SpeakerRecognizer;\n\n//# sourceMappingURL=SpeakerRecognizer.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}