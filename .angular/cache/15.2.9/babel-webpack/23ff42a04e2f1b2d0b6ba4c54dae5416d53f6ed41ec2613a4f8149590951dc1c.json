{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationWebsocketMessageFormatter = void 0;\nconst Exports_js_1 = require(\"../../common/Exports.js\");\nconst ConversationConnectionMessage_js_1 = require(\"./ConversationConnectionMessage.js\");\n/**\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\n */\nclass ConversationWebsocketMessageFormatter {\n  /**\n   * Format incoming messages: text (speech partial/final, IM) or binary (tts)\n   */\n  toConnectionMessage(message) {\n    const deferral = new Exports_js_1.Deferred();\n    try {\n      if (message.messageType === Exports_js_1.MessageType.Text) {\n        const incomingMessage = new ConversationConnectionMessage_js_1.ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\n        deferral.resolve(incomingMessage);\n      } else if (message.messageType === Exports_js_1.MessageType.Binary) {\n        deferral.resolve(new ConversationConnectionMessage_js_1.ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\n      }\n    } catch (e) {\n      deferral.reject(`Error formatting the message. Error: ${e}`);\n    }\n    return deferral.promise;\n  }\n  /**\n   * Format outgoing messages: text (commands or IM)\n   */\n  fromConnectionMessage(message) {\n    const deferral = new Exports_js_1.Deferred();\n    try {\n      if (message.messageType === Exports_js_1.MessageType.Text) {\n        const payload = `${message.textBody ? message.textBody : \"\"}`;\n        deferral.resolve(new Exports_js_1.RawWebsocketMessage(Exports_js_1.MessageType.Text, payload, message.id));\n      }\n    } catch (e) {\n      deferral.reject(`Error formatting the message. ${e}`);\n    }\n    return deferral.promise;\n  }\n}\nexports.ConversationWebsocketMessageFormatter = ConversationWebsocketMessageFormatter;\n\n//# sourceMappingURL=ConversationWebsocketMessageFormatter.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}