{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringUtils = void 0;\n/**\n * String helper functions\n */\nclass StringUtils {\n  /**\n   * Formats a string by replacing the named {keys} in the string with the values contained in the replacement dictionary.\n   * @param format The format string that contains the parts to replace surrounded by {}. For example: \"wss://{region}.cts.speech.microsoft.com\".\n   * If your string needs to contain a { or } you can use the {{ and }} escape sequences respectively.\n   * @param replacements The dictionary of replacements. If a replacement is not found, it is replaced with an empty string\n   * @returns The formatted string. If you pass in a null or undefined format string, an empty string will be returned\n   */\n  static formatString(format, replacements) {\n    if (!format) {\n      return \"\";\n    }\n    if (!replacements) {\n      return format;\n    }\n    let formatted = \"\";\n    let key = \"\";\n    const appendToFormatted = str => {\n      formatted += str;\n    };\n    const appendToKey = str => {\n      key += str;\n    };\n    let appendFunc = appendToFormatted;\n    for (let i = 0; i < format.length; i++) {\n      const c = format[i];\n      const next = i + 1 < format.length ? format[i + 1] : \"\";\n      switch (c) {\n        case \"{\":\n          if (next === \"{\") {\n            appendFunc(\"{\");\n            i++;\n          } else {\n            appendFunc = appendToKey;\n          }\n          break;\n        case \"}\":\n          if (next === \"}\") {\n            appendFunc(\"}\");\n            i++;\n          } else {\n            if (replacements.hasOwnProperty(key)) {\n              formatted += replacements[key];\n            }\n            appendFunc = appendToFormatted;\n            key = \"\";\n          }\n          break;\n        default:\n          appendFunc(c);\n          break;\n      }\n    }\n    return formatted;\n  }\n}\nexports.StringUtils = StringUtils;\n\n//# sourceMappingURL=StringUtils.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}