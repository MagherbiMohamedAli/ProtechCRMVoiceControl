{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoiceProfileClient = void 0;\nconst Exports_js_1 = require(\"../common.speech/Exports.js\");\nconst AudioConfig_js_1 = require(\"./Audio/AudioConfig.js\");\nconst Contracts_js_1 = require(\"./Contracts.js\");\nconst Exports_js_2 = require(\"./Exports.js\");\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\nclass VoiceProfileClient extends Exports_js_2.Recognizer {\n  /**\n   * VoiceProfileClient constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n   */\n  constructor(speechConfig) {\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const speechConfigImpl = speechConfig;\n    Contracts_js_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    super(AudioConfig_js_1.AudioConfig.fromStreamInput(Exports_js_2.AudioInputStream.createPushStream()), speechConfigImpl.properties, new Exports_js_1.VoiceProfileConnectionFactory());\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.privVoiceAdapter = this.privReco;\n    this.privDisposedVoiceAdapter = false;\n  }\n  /**\n   * The collection of properties and their values defined for this VoiceProfileClient.\n   * @member VoiceProfileClient.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member VoiceProfileClient.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.createProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n   * @param {string} lang Language string (locale) for Voice Profile\n   * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n   */\n  createProfileAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const profileIds = yield this.privVoiceAdapter.createProfile(profileType, lang);\n      return new Exports_js_2.VoiceProfile(profileIds[0], profileType);\n    });\n  }\n  /**\n   * Get current information of a voice profile\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n  retrieveEnrollmentResultAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\n    });\n  }\n  /**\n   * Get all voice profiles on account with given voice profile type\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n   * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n   */\n  getAllProfilesAsync(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.getAllProfiles(profileType);\n      /*\n      const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n          return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n      }\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n      */\n    });\n  }\n  /**\n   * Get valid authorization phrases for voice profile enrollment\n   * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n   * @param {string} lang Language string (locale) for Voice Profile\n   */\n  getActivationPhrasesAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\n    });\n  }\n  /**\n   * Create a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n   */\n  enrollProfileAsync(profile, audioConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const configImpl = audioConfig;\n      Contracts_js_1.Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      this.audioConfig = audioConfig;\n      this.privVoiceAdapter.SpeakerAudioSource = configImpl;\n      return this.privVoiceAdapter.enrollProfile(profile);\n    });\n  }\n  /**\n   * Delete a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be deleted\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n  deleteProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.deleteProfile(profile);\n    });\n  }\n  /**\n   * Remove all enrollments for a speaker recognition voice profile\n   * @member VoiceProfileClient.prototype.resetProfileAsync\n   * @function\n   * @public\n   * @async\n   * @param {VoiceProfile} profile Voice Profile to be reset\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n   */\n  resetProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.privVoiceAdapter.resetProfile(profile);\n    });\n  }\n  /**\n   * Clean up object and close underlying connection\n   * @member VoiceProfileClient.prototype.close\n   * @function\n   * @async\n   * @public\n   */\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.dispose(true);\n    });\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new Exports_js_1.VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedVoiceAdapter) {\n        return;\n      }\n      this.privDisposedVoiceAdapter = true;\n      if (disposing) {\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new Exports_js_1.RecognizerConfig(speechConfig, this.properties);\n  }\n  getResult(result, successReason) {\n    const response = new Exports_js_2.VoiceProfileResult(result.ok ? successReason : Exports_js_2.ResultReason.Canceled, result.statusText);\n    return response;\n  }\n}\nexports.VoiceProfileClient = VoiceProfileClient;\n\n//# sourceMappingURL=VoiceProfileClient.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}