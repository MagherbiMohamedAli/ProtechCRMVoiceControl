{"ast":null,"code":"'use strict';\n\nconst encodings = new Set(['json', 'buffer', 'string']);\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set();\n  let method;\n  let encoding;\n  let headers;\n  let baseurl = '';\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`;\n          throw new Error(msg);\n        } else {\n          method = arg;\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg;\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg;\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`);\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg);\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code));\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.');\n        }\n        headers = arg;\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`);\n    }\n  });\n  if (!method) method = 'GET';\n  if (statusCodes.size === 0) {\n    statusCodes.add(200);\n  }\n  return mkrequest(statusCodes, method, encoding, headers, baseurl);\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}