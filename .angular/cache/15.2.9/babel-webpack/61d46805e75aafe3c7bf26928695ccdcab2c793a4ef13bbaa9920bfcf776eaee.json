{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Recognizer = void 0;\nconst Exports_js_1 = require(\"../common.speech/Exports.js\");\nconst Exports_js_2 = require(\"../common/Exports.js\");\nconst Contracts_js_1 = require(\"./Contracts.js\");\nconst Exports_js_3 = require(\"./Exports.js\");\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\nclass Recognizer {\n  /**\n   * Creates and initializes an instance of a Recognizer\n   * @constructor\n   * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n   * @param {PropertyCollection} properties - A set of properties to set on the recognizer\n   * @param {IConnectionFactory} connectionFactory - The factory class used to create a custom IConnection for the recognizer\n   */\n  constructor(audioConfig, properties, connectionFactory) {\n    this.audioConfig = audioConfig !== undefined ? audioConfig : Exports_js_3.AudioConfig.fromDefaultMicrophoneInput();\n    this.privDisposed = false;\n    this.privProperties = properties.clone();\n    this.privConnectionFactory = connectionFactory;\n    this.implCommonRecognizerSetup();\n  }\n  /**\n   * Dispose of associated resources.\n   * @member Recognizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposed);\n    Exports_js_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * @Internal\n   * Internal data member to support fromRecognizer* pattern methods on other classes.\n   * Do not use externally, object returned will change without warning or notice.\n   */\n  get internalData() {\n    return this.privReco;\n  }\n  /**\n   * This method performs cleanup of resources.\n   * The Boolean parameter disposing indicates whether the method is called\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n   * Derived classes should override this method to dispose resource if needed.\n   * @member Recognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - Flag to request disposal.\n   */\n  dispose(disposing) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposed) {\n        return;\n      }\n      this.privDisposed = true;\n      if (disposing) {\n        if (this.privReco) {\n          yield this.privReco.audioSource.turnOff();\n          yield this.privReco.dispose();\n        }\n      }\n    });\n  }\n  /**\n   * This method returns the current state of the telemetry setting.\n   * @member Recognizer.prototype.telemetryEnabled\n   * @function\n   * @public\n   * @returns true if the telemetry is enabled, false otherwise.\n   */\n  static get telemetryEnabled() {\n    return Exports_js_1.ServiceRecognizerBase.telemetryDataEnabled;\n  }\n  /**\n   * This method globally enables or disables telemetry.\n   * @member Recognizer.prototype.enableTelemetry\n   * @function\n   * @public\n   * @param enabled - Global setting for telemetry collection.\n   * If set to true, telemetry information like microphone errors,\n   * recognition errors are collected and sent to Microsoft.\n   * If set to false, no telemetry is sent to Microsoft.\n   */\n  static enableTelemetry(enabled) {\n    Exports_js_1.ServiceRecognizerBase.telemetryDataEnabled = enabled;\n  }\n  // Does the generic recognizer setup that is common across all recognizer types.\n  implCommonRecognizerSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n    const recognizerConfig = this.createRecognizerConfig(new Exports_js_1.SpeechServiceConfig(new Exports_js_1.Context(new Exports_js_1.OS(osPlatform, osName, osVersion))));\n    this.privReco = this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties), this.privConnectionFactory, this.audioConfig, recognizerConfig);\n  }\n  recognizeOnceAsyncImpl(recognitionMode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privDisposed);\n      const ret = new Exports_js_2.Deferred();\n      yield this.implRecognizerStop();\n      yield this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\n      const result = yield ret.promise;\n      yield this.implRecognizerStop();\n      return result;\n    });\n  }\n  startContinuousRecognitionAsyncImpl(recognitionMode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privDisposed);\n      yield this.implRecognizerStop();\n      yield this.privReco.recognize(recognitionMode, undefined, undefined);\n    });\n  }\n  stopContinuousRecognitionAsyncImpl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privDisposed);\n      yield this.implRecognizerStop();\n    });\n  }\n  implRecognizerStop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privReco) {\n        yield this.privReco.stopRecognizing();\n      }\n      return;\n    });\n  }\n  static getAuthFromProperties(properties) {\n    const subscriptionKey = properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_Key, undefined);\n    const authentication = subscriptionKey && subscriptionKey !== \"\" ? new Exports_js_1.CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new Exports_js_1.CognitiveTokenAuthentication(() => {\n      const authorizationToken = properties.getProperty(Exports_js_3.PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    }, () => {\n      const authorizationToken = properties.getProperty(Exports_js_3.PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    });\n    return authentication;\n  }\n}\nexports.Recognizer = Recognizer;\n\n//# sourceMappingURL=Recognizer.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}