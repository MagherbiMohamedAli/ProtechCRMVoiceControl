{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DialogServiceConnector = void 0;\nconst DialogConnectorFactory_js_1 = require(\"../common.speech/DialogConnectorFactory.js\");\nconst Exports_js_1 = require(\"../common.speech/Exports.js\");\nconst Exports_js_2 = require(\"../common/Exports.js\");\nconst Contracts_js_1 = require(\"./Contracts.js\");\nconst Exports_js_3 = require(\"./Exports.js\");\nconst PropertyId_js_1 = require(\"./PropertyId.js\");\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\nclass DialogServiceConnector extends Exports_js_3.Recognizer {\n  /**\n   * Initializes an instance of the DialogServiceConnector.\n   * @constructor\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n   */\n  constructor(dialogConfig, audioConfig) {\n    const dialogServiceConfigImpl = dialogConfig;\n    Contracts_js_1.Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectorFactory_js_1.DialogConnectionFactory());\n    this.isTurnComplete = true;\n    this.privIsDisposed = false;\n    this.privProperties = dialogServiceConfigImpl.properties.clone();\n    const agentConfig = this.buildAgentConfig();\n    this.privReco.agentConfig.set(agentConfig);\n  }\n  /**\n   * Starts a connection to the service.\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n   *\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n   * be notified when the connection is established.\n   * @member DialogServiceConnector.prototype.connect\n   * @function\n   * @public\n   */\n  connect(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\n  }\n  /**\n   * Closes the connection the service.\n   * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n   *\n   * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n   */\n  disconnect(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member DialogServiceConnector.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId_js_1.PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Sets the authorization token used to communicate with the service.\n   * @member DialogServiceConnector.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId_js_1.PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * The collection of properties and their values defined for this DialogServiceConnector.\n   * @member DialogServiceConnector.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /** Gets the template for the activity generated by service from speech.\n   * Properties from the template will be stamped on the generated activity.\n   * It can be empty\n   */\n  get speechActivityTemplate() {\n    return this.properties.getProperty(PropertyId_js_1.PropertyId.Conversation_Speech_Activity_Template);\n  }\n  /** Sets the template for the activity generated by service from speech.\n   * Properties from the template will be stamped on the generated activity.\n   * It can be null or empty.\n   * Note: it has to be a valid Json object.\n   */\n  set speechActivityTemplate(speechActivityTemplate) {\n    this.properties.setProperty(PropertyId_js_1.PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n  }\n  /**\n   * Starts recognition and stops after the first utterance is recognized.\n   * @member DialogServiceConnector.prototype.listenOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the result when the reco has completed.\n   * @param err - Callback invoked in case of an error.\n   */\n  listenOnceAsync(cb, err) {\n    if (this.isTurnComplete) {\n      Contracts_js_1.Contracts.throwIfDisposed(this.privIsDisposed);\n      const callbackHolder = () => __awaiter(this, void 0, void 0, function* () {\n        yield this.privReco.connect();\n        yield this.implRecognizerStop();\n        this.isTurnComplete = false;\n        const ret = new Exports_js_2.Deferred();\n        yield this.privReco.recognize(Exports_js_1.RecognitionMode.Conversation, ret.resolve, ret.reject);\n        const e = yield ret.promise;\n        yield this.implRecognizerStop();\n        return e;\n      });\n      const retPromise = callbackHolder();\n      retPromise.catch(() => {\n        // Destroy the recognizer.\n        // We've done all we can here.\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.dispose(true).catch(() => {});\n      });\n      Exports_js_2.marshalPromiseToCallbacks(retPromise.finally(() => {\n        this.isTurnComplete = true;\n      }), cb, err);\n    }\n  }\n  sendActivityAsync(activity, cb, errCb) {\n    Exports_js_2.marshalPromiseToCallbacks(this.privReco.sendMessage(activity), cb, errCb);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member DialogServiceConnector.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, err) {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privIsDisposed);\n    Exports_js_2.marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  }\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privIsDisposed) {\n        return;\n      }\n      if (disposing) {\n        this.privIsDisposed = true;\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new Exports_js_1.RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new Exports_js_1.DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n  buildAgentConfig() {\n    const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n    return {\n      botInfo: {\n        commType: communicationType,\n        commandsCulture: undefined,\n        connectionId: this.properties.getProperty(PropertyId_js_1.PropertyId.Conversation_Agent_Connection_Id),\n        conversationId: this.properties.getProperty(PropertyId_js_1.PropertyId.Conversation_Conversation_Id, undefined),\n        fromId: this.properties.getProperty(PropertyId_js_1.PropertyId.Conversation_From_Id, undefined),\n        ttsAudioFormat: this.properties.getProperty(PropertyId_js_1.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\n      },\n      version: 0.2\n    };\n  }\n}\nexports.DialogServiceConnector = DialogServiceConnector;\n\n//# sourceMappingURL=DialogServiceConnector.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}