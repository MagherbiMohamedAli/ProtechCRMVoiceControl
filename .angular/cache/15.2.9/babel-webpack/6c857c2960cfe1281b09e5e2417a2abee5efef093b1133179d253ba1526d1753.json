{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationManager = void 0;\nconst Exports_js_1 = require(\"../../common.browser/Exports.js\");\nconst Contracts_js_1 = require(\"../../sdk/Contracts.js\");\nconst Exports_js_2 = require(\"../../sdk/Exports.js\");\nconst ConversationConnectionConfig_js_1 = require(\"./ConversationConnectionConfig.js\");\nclass ConversationManager {\n  constructor() {\n    //\n    this.privRequestParams = ConversationConnectionConfig_js_1.ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig_js_1.ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig_js_1.ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig_js_1.ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig_js_1.ConversationConnectionConfig.restPath;\n    this.privRestAdapter = new Exports_js_1.RestMessageAdapter({});\n  }\n  /**\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n   * @param args\n   * @param conversationCode\n   * @param callback\n   * @param errorCallback\n   */\n  createOrJoin(args, conversationCode, cb, err) {\n    try {\n      Contracts_js_1.Contracts.throwIfNullOrUndefined(args, \"args\");\n      const languageCode = args.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig_js_1.ConversationConnectionConfig.defaultLanguageCode);\n      const nickname = args.getProperty(Exports_js_2.PropertyId.ConversationTranslator_Name, \"conversation_host\");\n      const endpointHost = args.getProperty(Exports_js_2.PropertyId.ConversationTranslator_Host, this.privHost);\n      const correlationId = args.getProperty(Exports_js_2.PropertyId.ConversationTranslator_CorrelationId);\n      const subscriptionKey = args.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Key);\n      const subscriptionRegion = args.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Region);\n      const authToken = args.getProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token);\n      Contracts_js_1.Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts_js_1.Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts_js_1.Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      const queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      const headers = {};\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig_js_1.ConversationConnectionConfig.clientAppId;\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts_js_1.Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n        } else {\n          Contracts_js_1.Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n      const config = {};\n      config.headers = headers;\n      this.privRestAdapter.options = config;\n      const endpoint = `https://${endpointHost}${this.privRestPath}`;\n      // TODO: support a proxy and certificate validation\n      this.privRestAdapter.request(Exports_js_1.RestRequestType.Post, endpoint, queryParams, null).then(response => {\n        const requestId = Exports_js_1.RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            let errorMessage = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n            let errMessageRaw;\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n            } catch (e) {\n              errorMessage += ` [${response.data}]`;\n            }\n            if (requestId) {\n              errorMessage += ` ${requestId}`;\n            }\n            err(errorMessage);\n          }\n          return;\n        }\n        const conversation = JSON.parse(response.data);\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n          cb = undefined;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n      }).catch(() => {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n   * @param args\n   * @param sessionToken\n   * @param callback\n   */\n  leave(args, sessionToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        Contracts_js_1.Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts_js_1.Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        const endpointHost = args.getProperty(Exports_js_2.PropertyId.ConversationTranslator_Host, this.privHost);\n        const correlationId = args.getProperty(Exports_js_2.PropertyId.ConversationTranslator_CorrelationId);\n        const queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.sessionToken] = sessionToken;\n        const headers = {};\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n        const config = {};\n        config.headers = headers;\n        this.privRestAdapter.options = config;\n        const endpoint = `https://${endpointHost}${this.privRestPath}`;\n        // TODO: support a proxy and certificate validation\n        this.privRestAdapter.request(Exports_js_1.RestRequestType.Delete, endpoint, queryParams, null).then(response => {\n          if (!response.ok) {\n            // ignore errors on delete\n          }\n          resolve();\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n        }).catch(() => {});\n      } catch (error) {\n        if (error instanceof Error) {\n          const typedError = error;\n          reject(typedError.name + \": \" + typedError.message);\n        } else {\n          reject(error);\n        }\n      }\n    });\n  }\n}\nexports.ConversationManager = ConversationManager;\n\n//# sourceMappingURL=ConversationManager.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}