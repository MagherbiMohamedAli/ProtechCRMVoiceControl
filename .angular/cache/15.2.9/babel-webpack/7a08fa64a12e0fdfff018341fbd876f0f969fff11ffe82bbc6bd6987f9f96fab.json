{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechConnectionMessage = void 0;\nconst Exports_js_1 = require(\"../common/Exports.js\");\nconst HeaderNames_js_1 = require(\"./HeaderNames.js\");\nclass SpeechConnectionMessage extends Exports_js_1.ConnectionMessage {\n  constructor(messageType, path, requestId, contentType, body, streamId, additionalHeaders, id) {\n    if (!path) {\n      throw new Exports_js_1.ArgumentNullError(\"path\");\n    }\n    if (!requestId) {\n      throw new Exports_js_1.ArgumentNullError(\"requestId\");\n    }\n    const headers = {};\n    headers[HeaderNames_js_1.HeaderNames.Path] = path;\n    headers[HeaderNames_js_1.HeaderNames.RequestId] = requestId;\n    headers[HeaderNames_js_1.HeaderNames.RequestTimestamp] = new Date().toISOString();\n    if (contentType) {\n      headers[HeaderNames_js_1.HeaderNames.ContentType] = contentType;\n    }\n    if (streamId) {\n      headers[HeaderNames_js_1.HeaderNames.RequestStreamId] = streamId;\n    }\n    if (additionalHeaders) {\n      for (const headerName in additionalHeaders) {\n        if (headerName) {\n          headers[headerName] = additionalHeaders[headerName];\n        }\n      }\n    }\n    if (id) {\n      super(messageType, body, headers, id);\n    } else {\n      super(messageType, body, headers);\n    }\n    this.privPath = path;\n    this.privRequestId = requestId;\n    this.privContentType = contentType;\n    this.privStreamId = streamId;\n    this.privAdditionalHeaders = additionalHeaders;\n  }\n  get path() {\n    return this.privPath;\n  }\n  get requestId() {\n    return this.privRequestId;\n  }\n  get contentType() {\n    return this.privContentType;\n  }\n  get streamId() {\n    return this.privStreamId;\n  }\n  get additionalHeaders() {\n    return this.privAdditionalHeaders;\n  }\n  static fromConnectionMessage(message) {\n    let path = null;\n    let requestId = null;\n    let contentType = null;\n    // let requestTimestamp = null;\n    let streamId = null;\n    const additionalHeaders = {};\n    if (message.headers) {\n      for (const headerName in message.headers) {\n        if (headerName) {\n          if (headerName.toLowerCase() === HeaderNames_js_1.HeaderNames.Path.toLowerCase()) {\n            path = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_js_1.HeaderNames.RequestId.toLowerCase()) {\n            requestId = message.headers[headerName];\n            // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\n            //  requestTimestamp = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_js_1.HeaderNames.ContentType.toLowerCase()) {\n            contentType = message.headers[headerName];\n          } else if (headerName.toLowerCase() === HeaderNames_js_1.HeaderNames.RequestStreamId.toLowerCase()) {\n            streamId = message.headers[headerName];\n          } else {\n            additionalHeaders[headerName] = message.headers[headerName];\n          }\n        }\n      }\n    }\n    return new SpeechConnectionMessage(message.messageType, path, requestId, contentType, message.body, streamId, additionalHeaders, message.id);\n  }\n}\nexports.SpeechConnectionMessage = SpeechConnectionMessage;\n\n//# sourceMappingURL=SpeechConnectionMessage.Internal.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}