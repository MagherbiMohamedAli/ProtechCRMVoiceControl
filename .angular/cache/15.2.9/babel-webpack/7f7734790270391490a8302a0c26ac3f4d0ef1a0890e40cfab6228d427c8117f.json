{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConversationTranscriber = void 0;\nconst Exports_js_1 = require(\"../../common.speech/Exports.js\");\nconst Exports_js_2 = require(\"../../common/Exports.js\");\nconst Contracts_js_1 = require(\"../Contracts.js\");\nconst Exports_js_3 = require(\"../Exports.js\");\n/**\n * Performs speech recognition with speaker separation from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class ConversationTranscriber\n */\nclass ConversationTranscriber extends Exports_js_3.Recognizer {\n  /**\n   * ConversationTranscriber constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts_js_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_js_3.PropertyId[Exports_js_3.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechConfigImpl.properties, new Exports_js_1.ConversationTranscriberConnectionFactory());\n    this.privProperties.setProperty(Exports_js_3.PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * ConversationTranscriber constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    const recognizer = new ConversationTranscriber(speechConfig, audioConfig);\n    return recognizer;\n  }\n  /**\n   * Gets the endpoint id of a customized speech model that is used for transcription.\n   * @member ConversationTranscriber.prototype.endpointId\n   * @function\n   * @public\n   * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n   */\n  get endpointId() {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member ConversationTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member ConversationTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(Exports_js_3.PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Gets the spoken language of transcription.\n   * @member ConversationTranscriber.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} The spoken language of transcription.\n   */\n  get speechRecognitionLanguage() {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the output format of transcription.\n   * @member ConversationTranscriber.prototype.outputFormat\n   * @function\n   * @public\n   * @returns {OutputFormat} The output format of transcription.\n   */\n  get outputFormat() {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    if (this.properties.getProperty(Exports_js_1.OutputFormatPropertyName, Exports_js_3.OutputFormat[Exports_js_3.OutputFormat.Simple]) === Exports_js_3.OutputFormat[Exports_js_3.OutputFormat.Simple]) {\n      return Exports_js_3.OutputFormat.Simple;\n    } else {\n      return Exports_js_3.OutputFormat.Detailed;\n    }\n  }\n  /**\n   * The collection of properties and their values defined for this conversation transcriber.\n   * @member ConversationTranscriber.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts conversation transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member ConversationTranscriber.prototype.startTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startTranscribingAsync(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(Exports_js_1.RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops conversation transcription.\n   * @member ConversationTranscriber.prototype.stopTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopTranscribingAsync(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member ConversationTranscriber.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    Exports_js_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member SpeechRecognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new Exports_js_1.RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    recognizerConfig.isSpeakerDiarizationEnabled = true;\n    return new Exports_js_1.ConversationTranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n}\nexports.ConversationTranscriber = ConversationTranscriber;\n\n//# sourceMappingURL=ConversationTranscriber.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}