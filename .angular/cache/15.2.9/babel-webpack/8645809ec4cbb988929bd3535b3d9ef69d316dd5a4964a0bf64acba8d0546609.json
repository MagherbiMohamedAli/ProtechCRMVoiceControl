{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionMessage = exports.MessageType = void 0;\nconst Error_js_1 = require(\"./Error.js\");\nconst Guid_js_1 = require(\"./Guid.js\");\nvar MessageType;\n(function (MessageType) {\n  MessageType[MessageType[\"Text\"] = 0] = \"Text\";\n  MessageType[MessageType[\"Binary\"] = 1] = \"Binary\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\nclass ConnectionMessage {\n  constructor(messageType, body, headers, id) {\n    this.privBody = null;\n    if (messageType === MessageType.Text && body && !(typeof body === \"string\")) {\n      throw new Error_js_1.InvalidOperationError(\"Payload must be a string\");\n    }\n    if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n      throw new Error_js_1.InvalidOperationError(\"Payload must be ArrayBuffer\");\n    }\n    this.privMessageType = messageType;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.privBody = body;\n    this.privHeaders = headers ? headers : {};\n    this.privId = id ? id : Guid_js_1.createNoDashGuid();\n    switch (this.messageType) {\n      case MessageType.Binary:\n        this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\n        break;\n      case MessageType.Text:\n        this.privSize = this.textBody.length;\n    }\n  }\n  get messageType() {\n    return this.privMessageType;\n  }\n  get headers() {\n    return this.privHeaders;\n  }\n  get body() {\n    return this.privBody;\n  }\n  get textBody() {\n    if (this.privMessageType === MessageType.Binary) {\n      throw new Error_js_1.InvalidOperationError(\"Not supported for binary message\");\n    }\n    return this.privBody;\n  }\n  get binaryBody() {\n    if (this.privMessageType === MessageType.Text) {\n      throw new Error_js_1.InvalidOperationError(\"Not supported for text message\");\n    }\n    return this.privBody;\n  }\n  get id() {\n    return this.privId;\n  }\n}\nexports.ConnectionMessage = ConnectionMessage;\n\n//# sourceMappingURL=ConnectionMessage.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}