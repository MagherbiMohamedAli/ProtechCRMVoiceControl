{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AudioFileWriter = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst Contracts_js_1 = require(\"../Contracts.js\");\nclass AudioFileWriter {\n  constructor(filename) {\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\n    this.privFd = fs.openSync(filename, \"w\");\n  }\n  set format(format) {\n    Contracts_js_1.Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\n    this.privAudioFormat = format;\n    let headerOffset = 0;\n    if (this.privAudioFormat.hasHeader) {\n      headerOffset = this.privAudioFormat.header.byteLength;\n    }\n    if (this.privFd !== undefined) {\n      this.privWriteStream = fs.createWriteStream(\"\", {\n        fd: this.privFd,\n        start: headerOffset,\n        autoClose: false\n      });\n    }\n  }\n  write(buffer) {\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\n    if (this.privWriteStream !== undefined) {\n      this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\n    }\n  }\n  close() {\n    if (this.privFd !== undefined) {\n      this.privWriteStream.on(\"finish\", () => {\n        if (this.privAudioFormat.hasHeader) {\n          this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\n          fs.writeSync(this.privFd, new Int8Array(this.privAudioFormat.header), 0, this.privAudioFormat.header.byteLength, 0);\n        }\n        fs.closeSync(this.privFd);\n        this.privFd = undefined;\n      });\n      this.privWriteStream.end();\n    }\n  }\n  id() {\n    return this.privId;\n  }\n}\nexports.AudioFileWriter = AudioFileWriter;\n\n//# sourceMappingURL=AudioFileWriter.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}