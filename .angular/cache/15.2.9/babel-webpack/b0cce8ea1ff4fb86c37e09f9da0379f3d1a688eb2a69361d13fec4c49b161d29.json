{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.List = void 0;\nconst Error_js_1 = require(\"./Error.js\");\nclass List {\n  constructor(list) {\n    this.privSubscriptionIdCounter = 0;\n    this.privAddSubscriptions = {};\n    this.privRemoveSubscriptions = {};\n    this.privDisposedSubscriptions = {};\n    this.privDisposeReason = null;\n    this.privList = [];\n    // copy the list rather than taking as is.\n    if (list) {\n      for (const item of list) {\n        this.privList.push(item);\n      }\n    }\n  }\n  get(itemIndex) {\n    this.throwIfDisposed();\n    return this.privList[itemIndex];\n  }\n  first() {\n    return this.get(0);\n  }\n  last() {\n    return this.get(this.length() - 1);\n  }\n  add(item) {\n    this.throwIfDisposed();\n    this.insertAt(this.privList.length, item);\n  }\n  insertAt(index, item) {\n    this.throwIfDisposed();\n    if (index === 0) {\n      this.privList.unshift(item);\n    } else if (index === this.privList.length) {\n      this.privList.push(item);\n    } else {\n      this.privList.splice(index, 0, item);\n    }\n    this.triggerSubscriptions(this.privAddSubscriptions);\n  }\n  removeFirst() {\n    this.throwIfDisposed();\n    return this.removeAt(0);\n  }\n  removeLast() {\n    this.throwIfDisposed();\n    return this.removeAt(this.length() - 1);\n  }\n  removeAt(index) {\n    this.throwIfDisposed();\n    return this.remove(index, 1)[0];\n  }\n  remove(index, count) {\n    this.throwIfDisposed();\n    const removedElements = this.privList.splice(index, count);\n    this.triggerSubscriptions(this.privRemoveSubscriptions);\n    return removedElements;\n  }\n  clear() {\n    this.throwIfDisposed();\n    this.remove(0, this.length());\n  }\n  length() {\n    this.throwIfDisposed();\n    return this.privList.length;\n  }\n  onAdded(addedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privAddSubscriptions[subscriptionId] = addedCallback;\n    return {\n      detach: () => {\n        delete this.privAddSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n  onRemoved(removedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n    return {\n      detach: () => {\n        delete this.privRemoveSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n  onDisposed(disposedCallback) {\n    this.throwIfDisposed();\n    const subscriptionId = this.privSubscriptionIdCounter++;\n    this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n    return {\n      detach: () => {\n        delete this.privDisposedSubscriptions[subscriptionId];\n        return Promise.resolve();\n      }\n    };\n  }\n  join(seperator) {\n    this.throwIfDisposed();\n    return this.privList.join(seperator);\n  }\n  toArray() {\n    const cloneCopy = Array();\n    this.privList.forEach(val => {\n      cloneCopy.push(val);\n    });\n    return cloneCopy;\n  }\n  any(callback) {\n    this.throwIfDisposed();\n    if (callback) {\n      return this.where(callback).length() > 0;\n    } else {\n      return this.length() > 0;\n    }\n  }\n  all(callback) {\n    this.throwIfDisposed();\n    return this.where(callback).length() === this.length();\n  }\n  forEach(callback) {\n    this.throwIfDisposed();\n    for (let i = 0; i < this.length(); i++) {\n      callback(this.privList[i], i);\n    }\n  }\n  select(callback) {\n    this.throwIfDisposed();\n    const selectList = [];\n    for (let i = 0; i < this.privList.length; i++) {\n      selectList.push(callback(this.privList[i], i));\n    }\n    return new List(selectList);\n  }\n  where(callback) {\n    this.throwIfDisposed();\n    const filteredList = new List();\n    for (let i = 0; i < this.privList.length; i++) {\n      if (callback(this.privList[i], i)) {\n        filteredList.add(this.privList[i]);\n      }\n    }\n    return filteredList;\n  }\n  orderBy(compareFn) {\n    this.throwIfDisposed();\n    const clonedArray = this.toArray();\n    const orderedArray = clonedArray.sort(compareFn);\n    return new List(orderedArray);\n  }\n  orderByDesc(compareFn) {\n    this.throwIfDisposed();\n    return this.orderBy((a, b) => compareFn(b, a));\n  }\n  clone() {\n    this.throwIfDisposed();\n    return new List(this.toArray());\n  }\n  concat(list) {\n    this.throwIfDisposed();\n    return new List(this.privList.concat(list.toArray()));\n  }\n  concatArray(array) {\n    this.throwIfDisposed();\n    return new List(this.privList.concat(array));\n  }\n  isDisposed() {\n    return this.privList == null;\n  }\n  dispose(reason) {\n    if (!this.isDisposed()) {\n      this.privDisposeReason = reason;\n      this.privList = null;\n      this.privAddSubscriptions = null;\n      this.privRemoveSubscriptions = null;\n      this.triggerSubscriptions(this.privDisposedSubscriptions);\n    }\n  }\n  throwIfDisposed() {\n    if (this.isDisposed()) {\n      throw new Error_js_1.ObjectDisposedError(\"List\", this.privDisposeReason);\n    }\n  }\n  triggerSubscriptions(subscriptions) {\n    if (subscriptions) {\n      for (const subscriptionId in subscriptions) {\n        if (subscriptionId) {\n          subscriptions[subscriptionId]();\n        }\n      }\n    }\n  }\n}\nexports.List = List;\n\n//# sourceMappingURL=List.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}