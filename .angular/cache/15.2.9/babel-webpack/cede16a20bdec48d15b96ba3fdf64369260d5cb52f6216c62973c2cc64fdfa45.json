{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsoleLoggingListener = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst LogLevel_js_1 = require(\"../sdk/LogLevel.js\");\nconst Contracts_js_1 = require(\"../sdk/Contracts.js\");\nclass ConsoleLoggingListener {\n  constructor(logLevelFilter = LogLevel_js_1.LogLevel.None) {\n    this.privLogPath = undefined;\n    this.privEnableConsoleOutput = true;\n    this.privLogLevelFilter = logLevelFilter;\n  }\n  set logPath(path) {\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\n    this.privLogPath = path;\n  }\n  set enableConsoleOutput(enableOutput) {\n    this.privEnableConsoleOutput = enableOutput;\n  }\n  onEvent(event) {\n    if (event.eventType >= this.privLogLevelFilter) {\n      const log = this.toString(event);\n      if (!!this.privLogPath) {\n        fs.writeFileSync(this.privLogPath, log + \"\\n\", {\n          flag: \"a+\"\n        });\n      }\n      if (this.privEnableConsoleOutput) {\n        switch (event.eventType) {\n          case LogLevel_js_1.LogLevel.Debug:\n            // eslint-disable-next-line no-console\n            console.debug(log);\n            break;\n          case LogLevel_js_1.LogLevel.Info:\n            // eslint-disable-next-line no-console\n            console.info(log);\n            break;\n          case LogLevel_js_1.LogLevel.Warning:\n            // eslint-disable-next-line no-console\n            console.warn(log);\n            break;\n          case LogLevel_js_1.LogLevel.Error:\n            // eslint-disable-next-line no-console\n            console.error(log);\n            break;\n          default:\n            // eslint-disable-next-line no-console\n            console.log(log);\n            break;\n        }\n      }\n    }\n  }\n  toString(event) {\n    const logFragments = [`${event.eventTime}`, `${event.name}`];\n    const e = event;\n    for (const prop in e) {\n      if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const value = e[prop];\n        let valueToLog = \"<NULL>\";\n        if (value !== undefined && value !== null) {\n          if (typeof value === \"number\" || typeof value === \"string\") {\n            valueToLog = value.toString();\n          } else {\n            valueToLog = JSON.stringify(value);\n          }\n        }\n        logFragments.push(`${prop}: ${valueToLog}`);\n      }\n    }\n    return logFragments.join(\" | \");\n  }\n}\nexports.ConsoleLoggingListener = ConsoleLoggingListener;\n\n//# sourceMappingURL=ConsoleLoggingListener.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}