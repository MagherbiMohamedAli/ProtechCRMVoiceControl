{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AudioOutputConfigImpl = exports.AudioConfigImpl = exports.AudioConfig = void 0;\nconst Exports_js_1 = require(\"../../common.browser/Exports.js\");\nconst Contracts_js_1 = require(\"../Contracts.js\");\nconst Exports_js_2 = require(\"../Exports.js\");\nconst AudioFileWriter_js_1 = require(\"./AudioFileWriter.js\");\nconst AudioInputStream_js_1 = require(\"./AudioInputStream.js\");\nconst AudioOutputStream_js_1 = require(\"./AudioOutputStream.js\");\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\nclass AudioConfig {\n  /**\n   * Creates an AudioConfig object representing the default microphone on the system.\n   * @member AudioConfig.fromDefaultMicrophoneInput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromDefaultMicrophoneInput() {\n    const pcmRecorder = new Exports_js_1.PcmRecorder(true);\n    return new AudioConfigImpl(new Exports_js_1.MicAudioSource(pcmRecorder));\n  }\n  /**\n   * Creates an AudioConfig object representing a microphone with the specified device ID.\n   * @member AudioConfig.fromMicrophoneInput\n   * @function\n   * @public\n   * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n   * Default microphone is used the value is omitted.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromMicrophoneInput(deviceId) {\n    const pcmRecorder = new Exports_js_1.PcmRecorder(true);\n    return new AudioConfigImpl(new Exports_js_1.MicAudioSource(pcmRecorder, deviceId));\n  }\n  /**\n   * Creates an AudioConfig object representing the specified file.\n   * @member AudioConfig.fromWavFileInput\n   * @function\n   * @public\n   * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromWavFileInput(file, name = \"unnamedBuffer.wav\") {\n    return new AudioConfigImpl(new Exports_js_1.FileAudioSource(file, name));\n  }\n  /**\n   * Creates an AudioConfig object representing the specified stream.\n   * @member AudioConfig.fromStreamInput\n   * @function\n   * @public\n   * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\n   * stream. Currently, only WAV / PCM is supported.\n   * @returns {AudioConfig} The audio input configuration being created.\n   */\n  static fromStreamInput(audioStream) {\n    if (audioStream instanceof Exports_js_2.PullAudioInputStreamCallback) {\n      return new AudioConfigImpl(new AudioInputStream_js_1.PullAudioInputStreamImpl(audioStream));\n    }\n    if (audioStream instanceof Exports_js_2.AudioInputStream) {\n      return new AudioConfigImpl(audioStream);\n    }\n    if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\n      const pcmRecorder = new Exports_js_1.PcmRecorder(false);\n      return new AudioConfigImpl(new Exports_js_1.MicAudioSource(pcmRecorder, null, null, audioStream));\n    }\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\n   * Creates an AudioConfig object representing the default speaker.\n   * @member AudioConfig.fromDefaultSpeakerOutput\n   * @function\n   * @public\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n  static fromDefaultSpeakerOutput() {\n    return new AudioOutputConfigImpl(new Exports_js_2.SpeakerAudioDestination());\n  }\n  /**\n   * Creates an AudioConfig object representing the custom IPlayer object.\n   * You can use the IPlayer object to control pause, resume, etc.\n   * @member AudioConfig.fromSpeakerOutput\n   * @function\n   * @public\n   * @param {IPlayer} player - the IPlayer object for playback.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.12.0\n   */\n  static fromSpeakerOutput(player) {\n    if (player === undefined) {\n      return AudioConfig.fromDefaultSpeakerOutput();\n    }\n    if (player instanceof Exports_js_2.SpeakerAudioDestination) {\n      return new AudioOutputConfigImpl(player);\n    }\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\n   * Creates an AudioConfig object representing a specified output audio file\n   * @member AudioConfig.fromAudioFileOutput\n   * @function\n   * @public\n   * @param {PathLike} filename - the filename of the output audio file\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n  static fromAudioFileOutput(filename) {\n    return new AudioOutputConfigImpl(new AudioFileWriter_js_1.AudioFileWriter(filename));\n  }\n  /**\n   * Creates an AudioConfig object representing a specified audio output stream\n   * @member AudioConfig.fromStreamOutput\n   * @function\n   * @public\n   * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n   * stream.\n   * @returns {AudioConfig} The audio output configuration being created.\n   * Added in version 1.11.0\n   */\n  static fromStreamOutput(audioStream) {\n    if (audioStream instanceof Exports_js_2.PushAudioOutputStreamCallback) {\n      return new AudioOutputConfigImpl(new AudioOutputStream_js_1.PushAudioOutputStreamImpl(audioStream));\n    }\n    if (audioStream instanceof Exports_js_2.PushAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n    if (audioStream instanceof Exports_js_2.PullAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n    throw new Error(\"Not Supported Type\");\n  }\n}\nexports.AudioConfig = AudioConfig;\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\nclass AudioConfigImpl extends AudioConfig {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioSource} source - An audio source.\n   */\n  constructor(source) {\n    super();\n    this.privSource = source;\n  }\n  /**\n   * Format information for the audio\n   */\n  get format() {\n    return this.privSource.format;\n  }\n  /**\n   * @member AudioConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, err) {\n    this.privSource.turnOff().then(() => {\n      if (!!cb) {\n        cb();\n      }\n    }, error => {\n      if (!!err) {\n        err(error);\n      }\n    });\n  }\n  /**\n   * @member AudioConfigImpl.prototype.id\n   * @function\n   * @public\n   */\n  id() {\n    return this.privSource.id();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.turnOn\n   * @function\n   * @public\n   * @returns {Promise<void>} A promise.\n   */\n  turnOn() {\n    return this.privSource.turnOn();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.attach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   * @returns {Promise<IAudioStreamNode>} A promise.\n   */\n  attach(audioNodeId) {\n    return this.privSource.attach(audioNodeId);\n  }\n  /**\n   * @member AudioConfigImpl.prototype.detach\n   * @function\n   * @public\n   * @param {string} audioNodeId - The audio node id.\n   */\n  detach(audioNodeId) {\n    return this.privSource.detach(audioNodeId);\n  }\n  /**\n   * @member AudioConfigImpl.prototype.turnOff\n   * @function\n   * @public\n   * @returns {Promise<void>} A promise.\n   */\n  turnOff() {\n    return this.privSource.turnOff();\n  }\n  /**\n   * @member AudioConfigImpl.prototype.events\n   * @function\n   * @public\n   * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n   */\n  get events() {\n    return this.privSource.events;\n  }\n  setProperty(name, value) {\n    Contracts_js_1.Contracts.throwIfNull(value, \"value\");\n    if (undefined !== this.privSource.setProperty) {\n      this.privSource.setProperty(name, value);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  }\n  getProperty(name, def) {\n    if (undefined !== this.privSource.getProperty) {\n      return this.privSource.getProperty(name, def);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n    return def;\n  }\n  get deviceInfo() {\n    return this.privSource.deviceInfo;\n  }\n}\nexports.AudioConfigImpl = AudioConfigImpl;\nclass AudioOutputConfigImpl extends AudioConfig {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {IAudioDestination} destination - An audio destination.\n   */\n  constructor(destination) {\n    super();\n    this.privDestination = destination;\n  }\n  set format(format) {\n    this.privDestination.format = format;\n  }\n  write(buffer) {\n    this.privDestination.write(buffer);\n  }\n  close() {\n    this.privDestination.close();\n  }\n  id() {\n    return this.privDestination.id();\n  }\n  setProperty() {\n    throw new Error(\"This AudioConfig instance does not support setting properties.\");\n  }\n  getProperty() {\n    throw new Error(\"This AudioConfig instance does not support getting properties.\");\n  }\n}\nexports.AudioOutputConfigImpl = AudioOutputConfigImpl;\n\n//# sourceMappingURL=AudioConfig.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}