{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LanguageUnderstandingModelImpl = exports.LanguageUnderstandingModel = void 0;\n// eslint-disable-next-line max-classes-per-file\nconst Contracts_js_1 = require(\"./Contracts.js\");\n/**\n * Language understanding model\n * @class LanguageUnderstandingModel\n */\nclass LanguageUnderstandingModel {\n  /**\n   * Creates and initializes a new instance\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Creates an language understanding model using the specified endpoint.\n   * @member LanguageUnderstandingModel.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} uri - A String that represents the endpoint of the language understanding model.\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n  static fromEndpoint(uri) {\n    Contracts_js_1.Contracts.throwIfNull(uri, \"uri\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    // Need to extract the app ID from the URL.\n    // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\n    // Start tearing the string apart.\n    // region can be extracted from the host name.\n    const firstDot = uri.host.indexOf(\".\");\n    if (-1 === firstDot) {\n      throw new Error(\"Could not determine region from endpoint\");\n    }\n    langModelImp.region = uri.host.substr(0, firstDot);\n    // Now the app ID.\n    const lastSegment = uri.pathname.lastIndexOf(\"/\") + 1;\n    if (-1 === lastSegment) {\n      throw new Error(\"Could not determine appId from endpoint\");\n    }\n    langModelImp.appId = uri.pathname.substr(lastSegment);\n    // And finally the key.\n    langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\n    if (undefined === langModelImp.subscriptionKey) {\n      throw new Error(\"Could not determine subscription key from endpoint\");\n    }\n    return langModelImp;\n  }\n  /**\n   * Creates an language understanding model using the application id of Language Understanding service.\n   * @member LanguageUnderstandingModel.fromAppId\n   * @function\n   * @public\n   * @param {string} appId - A String that represents the application id of Language Understanding service.\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n  static fromAppId(appId) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    return langModelImp;\n  }\n  /**\n   * Creates a language understanding model using hostname, subscription key and application\n   * id of Language Understanding service.\n   * @member LanguageUnderstandingModel.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - A String that represents the subscription key of\n   * Language Understanding service.\n   * @param {string} appId - A String that represents the application id of Language\n   * Understanding service.\n   * @param {LanguageUnderstandingModel} region - A String that represents the region\n   * of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\n   */\n  static fromSubscription(subscriptionKey, appId, region) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    langModelImp.region = region;\n    langModelImp.subscriptionKey = subscriptionKey;\n    return langModelImp;\n  }\n}\nexports.LanguageUnderstandingModel = LanguageUnderstandingModel;\n/**\n * @private\n * @class LanguageUnderstandingModelImpl\n */\nclass LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {}\nexports.LanguageUnderstandingModelImpl = LanguageUnderstandingModelImpl;\n\n//# sourceMappingURL=LanguageUnderstandingModel.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}