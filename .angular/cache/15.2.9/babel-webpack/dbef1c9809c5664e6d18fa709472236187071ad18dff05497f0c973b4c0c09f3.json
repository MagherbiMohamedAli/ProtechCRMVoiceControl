{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Stream = void 0;\nconst Error_js_1 = require(\"./Error.js\");\nconst Guid_js_1 = require(\"./Guid.js\");\nconst Queue_js_1 = require(\"./Queue.js\");\nclass Stream {\n  constructor(streamId) {\n    this.privIsWriteEnded = false;\n    this.privIsReadEnded = false;\n    this.privId = streamId ? streamId : Guid_js_1.createNoDashGuid();\n    this.privReaderQueue = new Queue_js_1.Queue();\n  }\n  get isClosed() {\n    return this.privIsWriteEnded;\n  }\n  get isReadEnded() {\n    return this.privIsReadEnded;\n  }\n  get id() {\n    return this.privId;\n  }\n  close() {\n    if (!this.privIsWriteEnded) {\n      this.writeStreamChunk({\n        buffer: null,\n        isEnd: true,\n        timeReceived: Date.now()\n      });\n      this.privIsWriteEnded = true;\n    }\n  }\n  writeStreamChunk(streamChunk) {\n    this.throwIfClosed();\n    if (!this.privReaderQueue.isDisposed()) {\n      try {\n        this.privReaderQueue.enqueue(streamChunk);\n      } catch (e) {\n        // Do nothing\n      }\n    }\n  }\n  read() {\n    if (this.privIsReadEnded) {\n      throw new Error_js_1.InvalidOperationError(\"Stream read has already finished\");\n    }\n    return this.privReaderQueue.dequeue().then(streamChunk => __awaiter(this, void 0, void 0, function* () {\n      if (streamChunk === undefined || streamChunk.isEnd) {\n        yield this.privReaderQueue.dispose(\"End of stream reached\");\n      }\n      return streamChunk;\n    }));\n  }\n  readEnded() {\n    if (!this.privIsReadEnded) {\n      this.privIsReadEnded = true;\n      this.privReaderQueue = new Queue_js_1.Queue();\n    }\n  }\n  throwIfClosed() {\n    if (this.privIsWriteEnded) {\n      throw new Error_js_1.InvalidOperationError(\"Stream closed\");\n    }\n  }\n}\nexports.Stream = Stream;\n\n//# sourceMappingURL=Stream.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}