{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PushAudioOutputStreamImpl = exports.PushAudioOutputStream = exports.PullAudioOutputStreamImpl = exports.PullAudioOutputStream = exports.AudioOutputStream = void 0;\n/* eslint-disable max-classes-per-file */\nconst Exports_js_1 = require(\"../../common/Exports.js\");\nconst Contracts_js_1 = require(\"../Contracts.js\");\nconst AudioOutputFormat_js_1 = require(\"./AudioOutputFormat.js\");\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\nclass AudioOutputStream {\n  /**\n   * Creates and initializes an instance.\n   * @constructor\n   */\n  constructor() {\n    return;\n  }\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member AudioOutputStream.createPullStream\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The audio output stream being created.\n   */\n  static createPullStream() {\n    return PullAudioOutputStream.create();\n  }\n}\nexports.AudioOutputStream = AudioOutputStream;\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\nclass PullAudioOutputStream extends AudioOutputStream {\n  /**\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\n   * @member PullAudioOutputStream.create\n   * @function\n   * @public\n   * @returns {PullAudioOutputStream} The push audio output stream being created.\n   */\n  static create() {\n    return new PullAudioOutputStreamImpl();\n  }\n}\nexports.PullAudioOutputStream = PullAudioOutputStream;\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\nclass PullAudioOutputStreamImpl extends PullAudioOutputStream {\n  /**\n   * Creates and initializes an instance with the given values.\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.privId = Exports_js_1.createNoDashGuid();\n    this.privStream = new Exports_js_1.Stream();\n  }\n  /**\n   * Sets the format information to the stream. For internal use only.\n   * @param {AudioStreamFormat} format - the format to be set.\n   */\n  set format(format) {\n    if (format === undefined || format === null) {\n      this.privFormat = AudioOutputFormat_js_1.AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n    this.privFormat = format;\n  }\n  /**\n   * Format information for the audio\n   */\n  get format() {\n    return this.privFormat;\n  }\n  /**\n   * Checks if the stream is closed\n   * @member PullAudioOutputStreamImpl.prototype.isClosed\n   * @property\n   * @public\n   */\n  get isClosed() {\n    return this.privStream.isClosed;\n  }\n  /**\n   * Gets the id of the stream\n   * @member PullAudioOutputStreamImpl.prototype.id\n   * @property\n   * @public\n   */\n  id() {\n    return this.privId;\n  }\n  /**\n   * Reads audio data from the internal buffer.\n   * @member PullAudioOutputStreamImpl.prototype.read\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n   * @returns {Promise<number>} - Audio buffer length has been read.\n   */\n  read(dataBuffer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const intView = new Int8Array(dataBuffer);\n      let totalBytes = 0;\n      if (this.privLastChunkView !== undefined) {\n        if (this.privLastChunkView.length > dataBuffer.byteLength) {\n          intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n          this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n          return Promise.resolve(dataBuffer.byteLength);\n        }\n        intView.set(this.privLastChunkView);\n        totalBytes = this.privLastChunkView.length;\n        this.privLastChunkView = undefined;\n      }\n      // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n      while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\n        const chunk = yield this.privStream.read();\n        if (chunk !== undefined && !chunk.isEnd) {\n          let tmpBuffer;\n          if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n            tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n            this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n          } else {\n            tmpBuffer = chunk.buffer;\n          }\n          intView.set(new Int8Array(tmpBuffer), totalBytes);\n          totalBytes += tmpBuffer.byteLength;\n        } else {\n          this.privStream.readEnded();\n        }\n      }\n      return totalBytes;\n    });\n  }\n  /**\n   * Writes the audio data specified by making an internal copy of the data.\n   * @member PullAudioOutputStreamImpl.prototype.write\n   * @function\n   * @public\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n   */\n  write(dataBuffer) {\n    Contracts_js_1.Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\n   * Closes the stream.\n   * @member PullAudioOutputStreamImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    this.privStream.close();\n  }\n}\nexports.PullAudioOutputStreamImpl = PullAudioOutputStreamImpl;\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\nclass PushAudioOutputStream extends AudioOutputStream {\n  /**\n   * Creates and initializes and instance.\n   * @constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * write() and close() methods.\n   * @member PushAudioOutputStream.create\n   * @function\n   * @public\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   * derived from PushAudioOutputStreamCallback\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\n   */\n  static create(callback) {\n    return new PushAudioOutputStreamImpl(callback);\n  }\n}\nexports.PushAudioOutputStream = PushAudioOutputStream;\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\nclass PushAudioOutputStreamImpl extends PushAudioOutputStream {\n  /**\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n   * read() and close() methods.\n   * @constructor\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n   * derived from PushAudioOutputStreamCallback\n   */\n  constructor(callback) {\n    super();\n    this.privId = Exports_js_1.createNoDashGuid();\n    this.privCallback = callback;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  set format(format) {}\n  write(buffer) {\n    if (!!this.privCallback.write) {\n      this.privCallback.write(buffer);\n    }\n  }\n  close() {\n    if (!!this.privCallback.close) {\n      this.privCallback.close();\n    }\n  }\n  id() {\n    return this.privId;\n  }\n}\nexports.PushAudioOutputStreamImpl = PushAudioOutputStreamImpl;\n\n//# sourceMappingURL=AudioOutputStream.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}