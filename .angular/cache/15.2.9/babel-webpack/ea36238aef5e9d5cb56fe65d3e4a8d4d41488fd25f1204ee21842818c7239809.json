{"ast":null,"code":"import _asyncToGenerator from \"C:/3GL/Angular/CloudApp/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { map, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/router\";\nconst URL = \"http://localhost:8080/api/Auth\";\nexport let ChatService = /*#__PURE__*/(() => {\n  var _class;\n  class ChatService {\n    constructor(afAuth, afs, http, router) {\n      this.afAuth = afAuth;\n      this.afs = afs;\n      this.http = http;\n      this.router = router;\n      this.currentUser = null;\n      this.afAuth.onAuthStateChanged(user => {\n        console.log('Changed: ', user);\n        this.currentUser = user;\n      });\n    }\n    signUp(username, email, birthday, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const credential = yield _this.afAuth.createUserWithEmailAndPassword(email, password);\n          const uid = credential.user?.uid;\n          if (!uid) {\n            throw new Error(\"User UID not available\");\n          }\n          const FirebaseUser = {\n            uid,\n            username,\n            email,\n            birthday,\n            password\n          };\n          yield _this.afs.collection('users').doc(uid).set(FirebaseUser);\n          const user = {\n            username,\n            email,\n            birthday,\n            password\n          };\n          return uid;\n        } catch (error) {\n          console.error(\"Erreur lors de l'inscription\", error);\n          throw error;\n        }\n      })();\n    }\n    sendVerifEmail(user) {\n      user.sendEmailVerification().then(res => {\n        this.router.navigate(['/verifyemail']);\n      }, err => {\n        alert(\"une erreur s'est produite\");\n      });\n    }\n    signIn({\n      email,\n      password\n    }) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const credential = yield _this2.afAuth.signInWithEmailAndPassword(email, password);\n          const user = credential.user;\n          if (!user) {\n            throw new Error(\"User information not available\");\n          }\n          const uid = user.uid;\n          if (user && user.emailVerified) {\n            _this2.router.navigate(['/home']);\n          } else {\n            _this2.router.navigate(['/verifyemail']);\n          }\n          return credential;\n        } catch (error) {\n          console.error(\"Erreur lors de la connexion\", error);\n          throw error;\n        }\n      })();\n    }\n    signOut() {\n      return this.afAuth.signOut();\n    }\n    getUsers() {\n      return this.afs.collection('users').valueChanges({\n        idField: 'uid'\n      });\n    }\n    getUserForMsg(msgFromId, users) {\n      for (let usr of users) {\n        if (usr.uid == msgFromId || usr.id === msgFromId) {\n          return usr.email;\n        }\n      }\n      return 'Deleted';\n    }\n    addChatMessage(msg) {\n      return this.afs.collection('messages').add({\n        msg,\n        from: this.currentUser?.email,\n        timestamp: new Date()\n      });\n    }\n    getChatMessages() {\n      let users = [];\n      return this.getUsers().pipe(switchMap(res => {\n        console.log('Users retrieved: ', res);\n        users = res;\n        return this.afs.collection('messages', ref => ref.orderBy('timestamp')).valueChanges({\n          idField: 'id'\n        });\n      }), map(messages => {\n        console.log('Messages retrieved: ', messages);\n        for (let m of messages) {\n          m.fromName = this.getUserForMsg(m.from, users);\n          m.myMsg = this.currentUser?.uid === m.from;\n        }\n        console.log('Processed messages: ', messages);\n        return messages;\n      }));\n    }\n  }\n  _class = ChatService;\n  _class.ɵfac = function ChatService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.Router));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}