{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechTranslationConfigImpl = exports.SpeechTranslationConfig = void 0;\n/* eslint-disable max-classes-per-file */\nconst Exports_js_1 = require(\"../common.speech/Exports.js\");\nconst Contracts_js_1 = require(\"./Contracts.js\");\nconst Exports_js_2 = require(\"./Exports.js\");\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\nclass SpeechTranslationConfig extends Exports_js_2.SpeechConfig {\n  /**\n   * Creates an instance of recognizer config.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n   * @member SpeechTranslationConfig.fromSubscription\n   * @function\n   * @public\n   * @param {string} subscriptionKey - The subscription key.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n  static fromSubscription(subscriptionKey, region) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    ret.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  }\n  /**\n   * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n   * expires, the caller needs to refresh it by setting the property authorizationToken with a new\n   * valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n   * will encounter errors during recognition.\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply\n   * to recognizers that have already been created.\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n   * @member SpeechTranslationConfig.fromAuthorizationToken\n   * @function\n   * @public\n   * @param {string} authorizationToken - The authorization token.\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n   * @returns {SpeechTranslationConfig} The speech translation config.\n   */\n  static fromAuthorizationToken(authorizationToken, region) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    ret.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  }\n  /**\n   * Creates an instance of the speech config with specified host and subscription key.\n   * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n   * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n   * Note: To use an authorization token with fromHost, use fromHost(URL),\n   * and then set the AuthorizationToken property on the created SpeechConfig instance.\n   * Note: Added in version 1.9.0.\n   * @member SpeechConfig.fromHost\n   * @function\n   * @public\n   * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n   * @returns {SpeechConfig} A speech factory instance.\n   */\n  static fromHost(hostName, subscriptionKey) {\n    Contracts_js_1.Contracts.throwIfNull(hostName, \"hostName\");\n    const speechImpl = new SpeechTranslationConfigImpl();\n    speechImpl.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n    return speechImpl;\n  }\n  /**\n   * Creates an instance of the speech translation config with specified endpoint and subscription key.\n   * This method is intended only for users who use a non-standard service endpoint or paramters.\n   * Note: The query properties specified in the endpoint URL are not changed, even if they are\n   * set by any other APIs. For example, if language is defined in the uri as query parameter\n   * \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n   * setting in uri takes precedence, and the effective language is \"de-DE\".\n   * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n   * fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n   * use the authorization token.\n   * @member SpeechTranslationConfig.fromEndpoint\n   * @function\n   * @public\n   * @param {URL} endpoint - The service endpoint to connect to.\n   * @param {string} subscriptionKey - The subscription key.\n   * @returns {SpeechTranslationConfig} A speech config instance.\n   */\n  static fromEndpoint(endpoint, subscriptionKey) {\n    Contracts_js_1.Contracts.throwIfNull(endpoint, \"endpoint\");\n    Contracts_js_1.Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n    ret.properties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    return ret;\n  }\n}\nexports.SpeechTranslationConfig = SpeechTranslationConfig;\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\nclass SpeechTranslationConfigImpl extends SpeechTranslationConfig {\n  constructor() {\n    super();\n    this.privSpeechProperties = new Exports_js_2.PropertyCollection();\n    this.outputFormat = Exports_js_2.OutputFormat.Simple;\n  }\n  /**\n   * Gets/Sets the authorization token.\n   * If this is set, subscription key is ignored.\n   * User needs to make sure the provided authorization token is valid and not expired.\n   * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} value - The authorization token.\n   */\n  set authorizationToken(value) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\n   * Sets the speech recognition language.\n   * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @param {string} value - The authorization token.\n   */\n  set speechRecognitionLanguage(value) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_RecoLanguage, value);\n  }\n  /**\n   * Gets the speech recognition language.\n   * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @return {string} The speechRecognitionLanguage.\n   */\n  get speechRecognitionLanguage() {\n    return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\n   * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n   * @function\n   * @public\n   */\n  get subscriptionKey() {\n    return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_Key]);\n  }\n  /**\n   * Gets the output format\n   * @member SpeechTranslationConfigImpl.prototype.outputFormat\n   * @function\n   * @public\n   */\n  get outputFormat() {\n    // eslint-disable-next-line\n    return Exports_js_2.OutputFormat[this.privSpeechProperties.getProperty(Exports_js_1.OutputFormatPropertyName, undefined)];\n  }\n  /**\n   * Gets/Sets the output format\n   * @member SpeechTranslationConfigImpl.prototype.outputFormat\n   * @function\n   * @public\n   */\n  set outputFormat(value) {\n    this.privSpeechProperties.setProperty(Exports_js_1.OutputFormatPropertyName, Exports_js_2.OutputFormat[value]);\n  }\n  /**\n   * Gets the endpoint id.\n   * @member SpeechTranslationConfigImpl.prototype.endpointId\n   * @function\n   * @public\n   */\n  get endpointId() {\n    return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_EndpointId);\n  }\n  /**\n   * Gets/Sets the endpoint id.\n   * @member SpeechTranslationConfigImpl.prototype.endpointId\n   * @function\n   * @public\n   */\n  set endpointId(value) {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_EndpointId, value);\n  }\n  /**\n   * Add a (text) target language to translate into.\n   * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n   * @function\n   * @public\n   * @param {string} value - The language such as de-DE\n   */\n  addTargetLanguage(value) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n    const languages = this.targetLanguages;\n    if (!languages.includes(value)) {\n      languages.push(value);\n      this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n    }\n  }\n  /**\n   * Gets the (text) target language to translate into.\n   * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n   * @function\n   * @public\n   * @param {string} value - The language such as de-DE\n   */\n  get targetLanguages() {\n    if (this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    } else {\n      return [];\n    }\n  }\n  /**\n   * Gets the voice name.\n   * @member SpeechTranslationConfigImpl.prototype.voiceName\n   * @function\n   * @public\n   */\n  get voiceName() {\n    return this.getProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_TranslationVoice]);\n  }\n  /**\n   * Gets/Sets the voice of the translated language, enable voice synthesis output.\n   * @member SpeechTranslationConfigImpl.prototype.voiceName\n   * @function\n   * @public\n   * @param {string} value - The name of the voice.\n   */\n  set voiceName(value) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_TranslationVoice, value);\n  }\n  /**\n   * Provides the region.\n   * @member SpeechTranslationConfigImpl.prototype.region\n   * @function\n   * @public\n   * @returns {string} The region.\n   */\n  get region() {\n    return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_Region);\n  }\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n    this.setProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n    this.setProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n    this.setProperty(Exports_js_2.PropertyId[Exports_js_2.PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n  }\n  /**\n   * Gets an arbitrary property value.\n   * @member SpeechTranslationConfigImpl.prototype.getProperty\n   * @function\n   * @public\n   * @param {string} name - The name of the property.\n   * @param {string} def - The default value of the property in case it is not set.\n   * @returns {string} The value of the property.\n   */\n  getProperty(name, def) {\n    return this.privSpeechProperties.getProperty(name, def);\n  }\n  /**\n   * Gets/Sets an arbitrary property value.\n   * @member SpeechTranslationConfigImpl.prototype.setProperty\n   * @function\n   * @public\n   * @param {string | PropertyId} name - The name of the property to set.\n   * @param {string} value - The value of the property.\n   */\n  setProperty(name, value) {\n    this.privSpeechProperties.setProperty(name, value);\n  }\n  /**\n   * Provides access to custom properties.\n   * @member SpeechTranslationConfigImpl.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The properties.\n   */\n  get properties() {\n    return this.privSpeechProperties;\n  }\n  /**\n   * Dispose of associated resources.\n   * @member SpeechTranslationConfigImpl.prototype.close\n   * @function\n   * @public\n   */\n  close() {\n    return;\n  }\n  setServiceProperty(name, value) {\n    const currentProperties = JSON.parse(this.privSpeechProperties.getProperty(Exports_js_1.ServicePropertiesPropertyName, \"{}\"));\n    currentProperties[name] = value;\n    this.privSpeechProperties.setProperty(Exports_js_1.ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n  }\n  setProfanity(profanity) {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceResponse_ProfanityOption, Exports_js_2.ProfanityOption[profanity]);\n  }\n  enableAudioLogging() {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n  }\n  requestWordLevelTimestamps() {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n  }\n  enableDictation() {\n    this.privSpeechProperties.setProperty(Exports_js_1.ForceDictationPropertyName, \"true\");\n  }\n  get speechSynthesisLanguage() {\n    return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_SynthLanguage);\n  }\n  set speechSynthesisLanguage(language) {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_SynthLanguage, language);\n  }\n  get speechSynthesisVoiceName() {\n    return this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_SynthVoice);\n  }\n  set speechSynthesisVoiceName(voice) {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_SynthVoice, voice);\n  }\n  get speechSynthesisOutputFormat() {\n    // eslint-disable-next-line\n    return Exports_js_2.SpeechSynthesisOutputFormat[this.privSpeechProperties.getProperty(Exports_js_2.PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n  }\n  set speechSynthesisOutputFormat(format) {\n    this.privSpeechProperties.setProperty(Exports_js_2.PropertyId.SpeechServiceConnection_SynthOutputFormat, Exports_js_2.SpeechSynthesisOutputFormat[format]);\n  }\n}\nexports.SpeechTranslationConfigImpl = SpeechTranslationConfigImpl;\n\n//# sourceMappingURL=SpeechTranslationConfig.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}