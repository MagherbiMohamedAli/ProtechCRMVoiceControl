{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SpeechRecognizer = void 0;\nconst Exports_js_1 = require(\"../common.speech/Exports.js\");\nconst Exports_js_2 = require(\"../common/Exports.js\");\nconst Contracts_js_1 = require(\"./Contracts.js\");\nconst Exports_js_3 = require(\"./Exports.js\");\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\nclass SpeechRecognizer extends Exports_js_3.Recognizer {\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts_js_1.Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_RecoLanguage), Exports_js_3.PropertyId[Exports_js_3.PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechConfigImpl.properties, new Exports_js_1.SpeechConnectionFactory());\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * SpeechRecognizer constructor.\n   * @constructor\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n    return recognizer;\n  }\n  /**\n   * Gets the endpoint id of a customized speech model that is used for speech recognition.\n   * @member SpeechRecognizer.prototype.endpointId\n   * @function\n   * @public\n   * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n   */\n  get endpointId() {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member SpeechRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n  get authorizationToken() {\n    return this.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member SpeechRecognizer.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n  set authorizationToken(token) {\n    Contracts_js_1.Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(Exports_js_3.PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} The spoken language of recognition.\n   */\n  get speechRecognitionLanguage() {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(Exports_js_3.PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * Gets the output format of recognition.\n   * @member SpeechRecognizer.prototype.outputFormat\n   * @function\n   * @public\n   * @returns {OutputFormat} The output format of recognition.\n   */\n  get outputFormat() {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    if (this.properties.getProperty(Exports_js_1.OutputFormatPropertyName, Exports_js_3.OutputFormat[Exports_js_3.OutputFormat.Simple]) === Exports_js_3.OutputFormat[Exports_js_3.OutputFormat.Simple]) {\n      return Exports_js_3.OutputFormat.Simple;\n    } else {\n      return Exports_js_3.OutputFormat.Detailed;\n    }\n  }\n  /**\n   * The collection of properties and their values defined for this SpeechRecognizer.\n   * @member SpeechRecognizer.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n   */\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts speech recognition, and stops after the first utterance is recognized.\n   * The task returns the recognition text as result.\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n   * so it is suitable only for single shot recognition\n   * like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n   * @member SpeechRecognizer.prototype.recognizeOnceAsync\n   * @function\n   * @public\n   * @param cb - Callback that received the SpeechRecognitionResult.\n   * @param err - Callback invoked in case of an error.\n   */\n  recognizeOnceAsync(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(Exports_js_1.RecognitionMode.Interactive), cb, err);\n  }\n  /**\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startContinuousRecognitionAsync(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(Exports_js_1.RecognitionMode.Conversation), cb, err);\n  }\n  /**\n   * Stops continuous speech recognition.\n   * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopContinuousRecognitionAsync(cb, err) {\n    Exports_js_2.marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\n   * Starts speech recognition with keyword spotting, until\n   * stopKeywordRecognitionAsync() is called.\n   * User must subscribe to events to receive recognition results.\n   * Note: Key word spotting functionality is only available on the\n   * Speech Devices SDK. This functionality is currently not included in the SDK itself.\n   * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param {KeywordRecognitionModel} model The keyword recognition model that\n   * specifies the keyword to be recognized.\n   * @param cb - Callback invoked once the recognition has started.\n   * @param err - Callback invoked in case of an error.\n   */\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts_js_1.Contracts.throwIfNull(model, \"model\");\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\n   * Stops continuous speech recognition.\n   * Note: Key word spotting functionality is only available on the\n   * Speech Devices SDK. This functionality is currently not included in the SDK itself.\n   * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the recognition has stopped.\n   * @param err - Callback invoked in case of an error.\n   */\n  stopKeywordRecognitionAsync(cb) {\n    if (!!cb) {\n      cb();\n    }\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member SpeechRecognizer.prototype.close\n   * @function\n   * @public\n   */\n  close(cb, errorCb) {\n    Contracts_js_1.Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    Exports_js_2.marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member SpeechRecognizer.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n  createRecognizerConfig(speechConfig) {\n    return new Exports_js_1.RecognizerConfig(speechConfig, this.privProperties);\n  }\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new Exports_js_1.SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n}\nexports.SpeechRecognizer = SpeechRecognizer;\n\n//# sourceMappingURL=SpeechRecognizer.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}